stages:
  - download
  - build
  - containerize

variables:
  ARCHITECTURES: "linux/amd64,linux/arm64"
  GOOS: linux
  CGO_ENABLED: 0
  GOROOT_BOOTSTRAP: /opt/bootstrap


########################################################################################################################
#                                                                                                                      #
#                                                  Bootstrap build.                                                    #
#                                                                                                                      #
# Due to the fact that Go requires Go to compile, a bootstrap image is required. The following build steps are made to #
# only build the bootstrap file and push it to the registry. It's only built when required, not always.                #
#                                                                                                                      #
########################################################################################################################

download:bootstrap:
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  variables:
    GIT_STRATEGY: none
    SHA: "f4ff5b5eb3a3cae1c993723f3eab519c5bae18866b5e5f96fe1102f0cb5c3e52  go1.4-bootstrap-20171003.tar.gz"
    SHA2: "afc1e12f5fe49a471e3aae7d906c73e9d5b1fdd36d52d72652dde8f6250152fb  go1.11.src.tar.gz"
  script:
    - wget https://dl.google.com/go/go1.4-bootstrap-20171003.tar.gz
    - wget https://dl.google.com/go/go1.11.src.tar.gz
    - echo "${SHA}" > shasum.txt
    - echo "${SHA2}" >> shasum.txt
    - sha256sum -c shasum.txt
  artifacts:
    paths:
      - go1.4-bootstrap-20171003.tar.gz
      - go1.11.src.tar.gz
    expire_in: 5 hours
  only:
    refs:
      - bootstrap

.build:base:
  stage: build
  needs:
    - download:bootstrap
  script: # Build on AMD first to allow for building bootstrap for aarch 64...
    - cd /opt/bootstrap/src
    - chmod +x make.bash
    - ./make.bash
    - cd /usr/local/go/src
    - chmod +x make.bash
    - ./make.bash --no-clean
    - export GOROOT_BOOTSTRAP=/usr/local/go
    - export PATH="/usr/local/go/bin:$PATH"
    - chmod +x bootstrap.bash
    - GOARCH="${ARCH}" ./bootstrap.bash
    - cd ${CI_PROJECT_DIR}
  artifacts:
    paths:
      - bootstrap.tbz
    expire_in: 1 days
  only:
    refs:
      - bootstrap

.build:debianish:
  image: registry.gitlab.com/jitesoft/dockerfiles/ubuntu:bionic
  extends: .build:base
  before_script:
    - apt-get update
    - apt-get install -y gcc openssl tar ca-certificates bzip2
    - tar -zxf go1.4-bootstrap-20171003.tar.gz -C /tmp
    - mv /tmp/go /opt/bootstrap
    - tar -xzf go1.11.src.tar.gz -C /usr/local

.build:alpine:
  extends: .build:base
  image: registry.gitlab.com/jitesoft/dockerfiles/misc/buildbase:latest
  before_script:
    - apk add --no-cache bash bzip2
    - tar -zxf go1.4-bootstrap-20171003.tar.gz -C /tmp
    - mv /tmp/go /opt/bootstrap
    - tar -xzf go1.11.src.tar.gz -C /usr/local

build:alpine:amd:
  extends: .build:alpine
  variables:
    GIT_STRATEGY: none
    ARCH: amd64
  after_script:
    - cp /usr/local/go-linux-amd64-bootstrap.tbz ${CI_PROJECT_DIR}/bootstrap.tbz
  tags:
    - native-amd64

build:alpine:arm:
  extends: .build:alpine
  variables:
    GIT_STRATEGY: none
    ARCH: arm64
  after_script:
    - cp /usr/local/go-linux-arm64-bootstrap.tbz ${CI_PROJECT_DIR}/bootstrap.tbz
  tags:
    - native-amd64

build:debianish:amd:
  extends: .build:debianish
  variables:
    GIT_STRATEGY: none
    ARCH: amd64
  after_script:
    - cp /usr/local/go-linux-amd64-bootstrap.tbz ${CI_PROJECT_DIR}/bootstrap.tbz
  tags:
    - native-amd64

build:debianish:arm:
  extends: .build:debianish
  variables:
    GIT_STRATEGY: none
    ARCH: arm64
  after_script:
    - cp /usr/local/go-linux-arm64-bootstrap.tbz ${CI_PROJECT_DIR}/bootstrap.tbz
  tags:
    - native-amd64
