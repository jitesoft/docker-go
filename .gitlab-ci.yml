include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/Scan/trivy.yml

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never

check:
  stage: .pre
  parallel:
    matrix:
      - { VERSION: 'latest', GIT_STRATEGY: 'none' }
      - { VERSION: 'prev', GIT_STRATEGY: 'none' }
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache libxml2-utils grep
    - touch ${VERSION}.txt
  script:
    - if [ "$VERSION" == "latest" ]; then REMOTE_VERSION=$(wget -qO- https://golang.org/dl/ | grep -oP "(?<=go)([0-9]{0,3}[.][0-9]{0,3}([.][0-9]{0,3})?)(?=.linux)" | uniq | head -n1 | awk 'NR=1{print $1}'); fi
    - if [ "$VERSION" != "latest" ]; then REMOTE_VERSION=$(wget -qO- https://golang.org/dl/ | grep -oP "(?<=go)([0-9]{0,3}[.][0-9]{0,3}([.][0-9]{0,3})?)(?=.linux)" | uniq | head -n2 | awk 'NR==2{print $1}'); fi
    - LOCAL_VERSION=$(cat ${VERSION}.txt)
    - |
      if [ ! -z "${FORCE_BUILD+x}" ] || [ "${REMOTE_VERSION}" != "${LOCAL_VERSION}" ]; then
        echo "${REMOTE_VERSION} and ${LOCAL_VERSION} differ. Running build."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[V_TYPE]=${VERSION}" -F "variables[VERSION]=${LOCAL_VERSION}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        echo "${REMOTE_VERSION} and ${LOCAL_VERSION} where equal. Running scan."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[OS_TYPE]=${OS_TYPE}" -F "variables[V_TYPE]=${VERSION}" -F "variables[VERSION]=${LOCAL_VERSION}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi
  cache:
    paths:
      - ${VERSION}.txt
    policy: pull

download:
  stage: .pre
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo "Downloading and building for version ${VERSION} (${V_TYPE} )"
  script:
    # Get sha.
    - SHASUM=$(wget -qO- https://golang.org/dl/ | xmllint --html --xpath "//a[contains(@class, 'download') and contains(@href, 'go${VERSION}.src.tar.gz') and not(contains(@class, 'downloadBox'))]/parent::td/following-sibling::td[5]/tt/text()" - 2>/dev/null)
    - echo "${SHASUM} go${VERSION}.src.tar.gz" >> sha256sum.txt
    - wget "https://dl.google.com/go/${VERSION}"
    - sha256sum -c sha256sum.txt
  artifacts:
    paths:
      - go${VERSION}.src.tar.gz
    expire_in: 1 day
  rules:
    - if: '$BUILD == "true"'
      when: always
    - when: never

build:
  stage: build
  rules:
    - if: '$BUILD == "true"'
      when: always
    - when: never
  parallel:
    matrix:
      - { OS_TYPE: 'alpine' }
      - { OS_TYPE: 'ubuntu' }
      - { OS_TYPE: 'debian' }
  trigger:
    include: ".gitlab/shared.yml"
    strategy: depend
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    BUILD: "true"
    TYPE: "$V_TYPE"
    VERSION: "$VERSION"
    OS_TYPE: "$OS_TYPE"

scan:
  stage: .post
  extends: .container_scanning
  rules:
    - if: '$SCAN == "true"'
      when: always
    - when: never
  variables:
    GIT_STRATEGY: none
  before_script:
    - TAG=":${VERSION}"
    - if [ $OS_TYPE != ${ALPINE} ]; then TAG="/${OS_TYPE}/${VERSION}:"; fi
    - SCANNING_IMAGE_NAME="${CI_REGISTRY_IMAGE}${TAG}"

stages:
  - .pre
  - build
  - .post
