include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

variables:
  ARCHITECTURES: "linux/amd64,linux/arm64"

stages:
  - pre
  - download
  - build
  - scan

download:versions:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  stage: pre
  variables:
    GIT_STRATEGY: none
  before_script:
    - apk add --no-cache libxml2-utils grep
  script:
    - VERSIONS=$(wget -qO- https://golang.org/dl/ | grep -oP "(?<=go)([0-9]{0,3}[.][0-9]{0,3}([.][0-9]{0,3})?)(?=.linux)" | sort -V -r -u - | head -n2)
    - |
      for VERSION in ${VERSIONS}; do
        OUTPUT=$(wget -qO- https://golang.org/dl/ | xmllint --html --xpath "//a[contains(@class, 'download') and contains(@href, 'go${VERSION}.src.tar.gz') and not(contains(@class, 'downloadBox'))]/parent::td/following-sibling::td[5]/tt/text()" - 2>/dev/null)
        echo "${OUTPUT} go${VERSION}.src.tar.gz" >> sha256sum.txt
      done
  artifacts:
    paths:
      - sha256sum.txt
    expire_in: 1 day
  tags: [ jitesoft ]
  only:
    refs:
      - master


download:src:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  stage: download
  variables:
    GIT_STRATEGY: none
  dependencies:
    - download:versions
  before_script:
    - apk add --no-cache coreutils
  script:
    - cat sha256sum.txt
    - |
      while read -r line
      do
        set -- $line
        wget "https://dl.google.com/go/${2}"
      done <"sha256sum.txt"
    - sha256sum -c sha256sum.txt
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/*.src.tar.gz
    expire_in: 1 day
  tags: [ jitesoft ]
  only:
    refs:
      - master

.build:alpine:
  dependencies:
    - download:src
    - download:versions
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - DOCKER_BUILDKIT=1
    - VERSION_SHORT="${VERSION_SHORT}"
    - OC=$(echo ${VERSION} | awk -F"." '{print NF-1}')
    - if [ "$OC" = "2" ]; then VERSION_SHORT=$(echo ${VERSION} | cut -d'.' -f1,2); fi
    - TAG_LIST=$(helper "${CI_REGISTRY_IMAGE},jitesoft/go", "${TAGS},${VERSION},${VERSION_SHORT}")
    - docker buildx build --cache-from="${CI_REGISTRY_IMAGE}/cache:alpine-${VERSION_SHORT}" --cache-to="${CI_REGISTRY_IMAGE}/cache:alpine-${VERSION_SHORT}" --platform ${ARCHITECTURES} --progress plain --push ${TAG_LIST} --build-arg VERSION=${VERSION} -f Alpine/Dockerfile .
  only:
    refs:
      - master
  tags: [ jitesoft, buildx, amd64, arm64 ]

.build:ubuntu:
  dependencies:
    - download:src
    - download:versions
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - DOCKER_BUILDKIT=1
    - VERSION_SHORT="${VERSION_SHORT}"
    - OC=$(echo ${VERSION} | awk -F"." '{print NF-1}')
    - if [ "$OC" = "2" ]; then VERSION_SHORT=$(echo ${VERSION} | cut -d'.' -f1,2); fi
    - TAG_LIST=$(helper "${CI_REGISTRY_IMAGE}/ubuntu", "${TAGS},${VERSION},${VERSION_SHORT}")
    - TAG_LIST_HUB=$(helper "jitesoft/go", "${TAGS}-ubuntu,${VERSION}-ubuntu,${VERSION_SHORT}-ubuntu")
    - docker buildx build --cache-from="${CI_REGISTRY_IMAGE}/cache:ubuntu-${VERSION_SHORT}" --cache-to="${CI_REGISTRY_IMAGE}/cache:ubuntu-${VERSION_SHORT}" --platform ${ARCHITECTURES} --progress plain --push ${TAG_LIST} ${TAG_LIST_HUB} --build-arg VERSION=${VERSION} -f Ubuntu/Dockerfile .
    - docker pull ${CI_REGISTRY_IMAGE}:${VERSION}
  only:
    refs:
      - master
  tags: [ jitesoft, buildx, amd64, arm64 ]

build:current:ubuntu:
  stage: build
  variables:
    TAGS: "latest"
  extends: .build:ubuntu
  before_script:
    - apk add --no-cache grep
    - FILE=$(cat sha256sum.txt | awk '{print $2}' | head -1)
    - VERSION=$(echo ${FILE} | grep -oP '([0-9]{0,3}[.][0-9]{0,3}([.][0-9]{0,3})?)(?=.src.tar.gz)')

build:prev:ubuntu:
  stage: build
  variables:
    TAGS: "prev"
  extends: .build:ubuntu
  before_script:
    - apk add --no-cache grep
    - FILE=$(cat sha256sum.txt | awk '{print $2}' | tail -1)
    - VERSION=$(echo ${FILE} | grep -oP '([0-9]{0,3}[.][0-9]{0,3}([.][0-9]{0,3})?)(?=.src.tar.gz)')

build:current:alpine:
  stage: build
  variables:
    TAGS: "latest"
  extends: .build:alpine
  before_script:
    - apk add --no-cache grep
    - FILE=$(cat sha256sum.txt | awk '{print $2}' | head -1)
    - VERSION=$(echo ${FILE} | grep -oP '([0-9]{0,3}[.][0-9]{0,3}([.][0-9]{0,3})?)(?=.src.tar.gz)')

build:prev:alpine:
  stage: build
  variables:
    TAGS: "prev"
  extends: .build:alpine
  before_script:
    - apk add --no-cache grep
    - FILE=$(cat sha256sum.txt | awk '{print $2}' | tail -1)
    - VERSION=$(echo ${FILE} | grep -oP '([0-9]{0,3}[.][0-9]{0,3}([.][0-9]{0,3})?)(?=.src.tar.gz)')

.scan:current:ubuntu:
  needs:
    - build:current:ubuntu
  stage: scan
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/ubuntu:latest"
    GIT_STRATEGY: none

.scan:prev:ubuntu:
  needs:
    - build:prev:ubuntu
  stage: scan
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/ubuntu:prev"
    GIT_STRATEGY: none

.scan:current:alpine:
  needs:
    - build:current:alpine
  stage: scan
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:latest"
    GIT_STRATEGY: none

.scan:prev:alpine:
  needs:
    - build:prev:alpine
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:prev"
    GIT_STRATEGY: none
